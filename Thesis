> ##########LIBRARY##########
> library(ranger)
> library(ggplot2)
> library(ggpubr)
> library(dplyr)
> library(ggfortify)
> library(survminer)
> library(randomForestSRC)
> library(readxl)
> ##########INPUT DATA##########
> DataDelay<-read_excel(("F:/KULIAH/SEMESTER 7/SKRIPSI/DataSkripsi.xlsx"))
> View(DataDelay)
> ##########IDENTIFIKASI VARIABEL##########
> DataDelay$Airlines <- as.factor(as.character(DataDelay$Airlines))
> DataDelay$Suhu <- as.numeric(as.character(DataDelay$Suhu))
> DataDelay$Kelembaban <- as.numeric(as.character(DataDelay$Kelembaban))
> DataDelay$CurahHujan <- as.numeric(as.character(DataDelay$CurahHujan))
> DataDelay$KecepatanAngin <- as.numeric(as.character(DataDelay$KecepatanAngin))
> DataDelay$ArahAngin <- as.factor(as.character(DataDelay$ArahAngin))
> ##########STATISTIKA DESKRIPTIF##########
> str(DataDelay)
tibble [1,188 x 8] (S3: tbl_df/tbl/data.frame)
 $ Airlines      : Factor w/ 5 levels "AirAsia","Batik Air",..: 5 1 4 2 5 3 1 4 4 2 ...
 $ Suhu          : num [1:1188] 26.2 26.3 26 26 26.3 ...
 $ Kelembaban    : num [1:1188] 19.1 19.1 18.9 18.8 18.9 ...
 $ CurahHujan    : num [1:1188] 0.34 0.48 1.12 1.29 0.68 0.43 0.42 0.42 0.42 0.93 ...
 $ KecepatanAngin: num [1:1188] 8.25 8.37 8.35 8.49 9.02 8.36 8.12 8.12 8.12 8.93 ...
 $ ArahAngin     : Factor w/ 16 levels "E","ENE","ESE",..: 5 5 5 5 5 6 6 6 6 6 ...
 $ Waktu         : num [1:1188] 12 51 7 9 11 55 50 137 120 39 ...
 $ Status        : num [1:1188] 0 1 0 0 0 1 1 1 1 1 ...
> 
> summary(DataDelay)
             Airlines        Suhu         Kelembaban      CurahHujan     KecepatanAngin
 AirAsia         :281   Min.   :25.73   Min.   :15.87   Min.   :0.0000   Min.   :0.06  
 Batik Air       :112   1st Qu.:27.30   1st Qu.:18.74   1st Qu.:0.0600   1st Qu.:2.72  
 Citilink        :292   Median :28.19   Median :19.41   Median :0.1600   Median :3.94  
 Garuda Indonesia:323   Mean   :28.10   Mean   :19.32   Mean   :0.2927   Mean   :4.09  
 Lion Air        :180   3rd Qu.:29.01   3rd Qu.:20.02   3rd Qu.:0.3700   3rd Qu.:5.37  
                        Max.   :31.66   Max.   :22.40   Max.   :5.4800   Max.   :9.61  
                                                                                       
   ArahAngin       Waktu            Status      
 NE     :181   Min.   :  1.00   Min.   :0.0000  
 SSW    :155   1st Qu.: 16.00   1st Qu.:0.0000  
 NNE    :141   Median : 25.00   Median :0.0000  
 SW     :127   Mean   : 41.29   Mean   :0.3897  
 ENE    :101   3rd Qu.: 42.00   3rd Qu.:1.0000  
 WSW    : 83   Max.   :717.00   Max.   :1.0000  
 (Other):400                                    
> 
> new.DataDelay <- as.data.frame(DataDelay)
> ##########DATA IN-BAG OUT-OF-BAG##########
> set.seed(1234)
> train <- sample(1:nrow(new.DataDelay), round(nrow(new.DataDelay) * 0.80), 
+                 replace = TRUE)
> 
> traindata <- new.DataDelay[train,]
> testdata <- new.DataDelay[-train,]
> ##########RSF LOG-RANK##########
> hasil1 <- rfsrc(Surv(Waktu, Status) ~ ., data = traindata,
+                ntree = 500, block.size = 1, splitrule = "logrank",importance = TRUE)
> print(hasil1)
                         Sample size: 950
                    Number of deaths: 372
                     Number of trees: 500
           Forest terminal node size: 15
       Average no. of terminal nodes: 41.164
No. of variables tried at each split: 3
              Total no. of variables: 6
       Resampling used to grow trees: swor
> ##########LIBRARY##########
> library(ranger)
> library(ggplot2)
> library(ggpubr)
> library(dplyr)
> library(ggfortify)
> library(survminer)
> library(randomForestSRC)
> library(readxl)
> ##########INPUT DATA##########
> DataDelay<-read_excel(("F:/KULIAH/SEMESTER 7/SKRIPSI/DataSkripsi.xlsx"))
> View(DataDelay)
> ##########IDENTIFIKASI VARIABEL##########
> DataDelay$Airlines <- as.factor(as.character(DataDelay$Airlines))
> DataDelay$Suhu <- as.numeric(as.character(DataDelay$Suhu))
> DataDelay$Kelembaban <- as.numeric(as.character(DataDelay$Kelembaban))
> DataDelay$CurahHujan <- as.numeric(as.character(DataDelay$CurahHujan))
> DataDelay$KecepatanAngin <- as.numeric(as.character(DataDelay$KecepatanAngin))
> DataDelay$ArahAngin <- as.factor(as.character(DataDelay$ArahAngin))
> ##########STATISTIKA DESKRIPTIF##########
> str(DataDelay)
tibble [1,188 x 8] (S3: tbl_df/tbl/data.frame)
 $ Airlines      : Factor w/ 5 levels "AirAsia","Batik Air",..: 5 1 4 2 5 3 1 4 4 2 ...
 $ Suhu          : num [1:1188] 26.2 26.3 26 26 26.3 ...
 $ Kelembaban    : num [1:1188] 19.1 19.1 18.9 18.8 18.9 ...
 $ CurahHujan    : num [1:1188] 0.34 0.48 1.12 1.29 0.68 0.43 0.42 0.42 0.42 0.93 ...
 $ KecepatanAngin: num [1:1188] 8.25 8.37 8.35 8.49 9.02 8.36 8.12 8.12 8.12 8.93 ...
 $ ArahAngin     : Factor w/ 16 levels "E","ENE","ESE",..: 5 5 5 5 5 6 6 6 6 6 ...
 $ Waktu         : num [1:1188] 12 51 7 9 11 55 50 137 120 39 ...
 $ Status        : num [1:1188] 0 1 0 0 0 1 1 1 1 1 ...
> 
> summary(DataDelay)
             Airlines        Suhu         Kelembaban      CurahHujan     KecepatanAngin
 AirAsia         :281   Min.   :25.73   Min.   :15.87   Min.   :0.0000   Min.   :0.06  
 Batik Air       :112   1st Qu.:27.30   1st Qu.:18.74   1st Qu.:0.0600   1st Qu.:2.72  
 Citilink        :292   Median :28.19   Median :19.41   Median :0.1600   Median :3.94  
 Garuda Indonesia:323   Mean   :28.10   Mean   :19.32   Mean   :0.2927   Mean   :4.09  
 Lion Air        :180   3rd Qu.:29.01   3rd Qu.:20.02   3rd Qu.:0.3700   3rd Qu.:5.37  
                        Max.   :31.66   Max.   :22.40   Max.   :5.4800   Max.   :9.61  
                                                                                       
   ArahAngin       Waktu            Status      
 NE     :181   Min.   :  1.00   Min.   :0.0000  
 SSW    :155   1st Qu.: 16.00   1st Qu.:0.0000  
 NNE    :141   Median : 25.00   Median :0.0000  
 SW     :127   Mean   : 41.29   Mean   :0.3897  
 ENE    :101   3rd Qu.: 42.00   3rd Qu.:1.0000  
 WSW    : 83   Max.   :717.00   Max.   :1.0000  
 (Other):400                                    
> 
> new.DataDelay <- as.data.frame(DataDelay)
> ##########DATA IN-BAG OUT-OF-BAG##########
> set.seed(1234)
> train <- sample(1:nrow(new.DataDelay), round(nrow(new.DataDelay) * 0.80), 
+                 replace = TRUE)
> 
> traindata <- new.DataDelay[train,]
> testdata <- new.DataDelay[-train,]
> ##########RSF LOG-RANK##########
> hasil1 <- rfsrc(Surv(Waktu, Status) ~ ., data = traindata,
+                ntree = 500, block.size = 1, splitrule = "logrank",importance = TRUE)
> print(hasil1)
                         Sample size: 950
                    Number of deaths: 372
                     Number of trees: 500
           Forest terminal node size: 15
       Average no. of terminal nodes: 41.164
No. of variables tried at each split: 3
              Total no. of variables: 6
       Resampling used to grow trees: swor
    Resample size used to grow trees: 600
                            Analysis: RSF
                              Family: surv
                      Splitting rule: logrank *random*
       Number of random split points: 10
                          (OOB) CRPS: 0.03379455
   (OOB) Requested performance error: 0.35906298

> ##########VIMP RSF LOG-RANK##########
> plot(hasil1)

                 Importance   Relative Imp
Airlines             0.0839         1.0000
KecepatanAngin       0.0606         0.7223
ArahAngin            0.0601         0.7156
Suhu                 0.0572         0.6814
CurahHujan           0.0491         0.5846
Kelembaban           0.0365         0.4351
> set.seed(1234)
> train <- sample(1:nrow(new.DataDelay), round(nrow(new.DataDelay) * 0.80), 
+                 replace = FALSE)
> 
> traindata <- new.DataDelay[train,]
> testdata <- new.DataDelay[-train,]
> hasil1 <- rfsrc(Surv(Waktu, Status) ~ ., data = traindata,
+                ntree = 500, block.size = 1, splitrule = "logrank",importance = TRUE)
> print(hasil1)
                         Sample size: 950
                    Number of deaths: 385
                     Number of trees: 500
           Forest terminal node size: 15
       Average no. of terminal nodes: 42.22
No. of variables tried at each split: 3
              Total no. of variables: 6
       Resampling used to grow trees: swor
    Resample size used to grow trees: 600
                            Analysis: RSF
                              Family: surv
                      Splitting rule: logrank *random*
       Number of random split points: 10
                          (OOB) CRPS: 0.04258359
   (OOB) Requested performance error: 0.46271645

> plot(hasil1)

                 Importance   Relative Imp
Airlines             0.0268         1.0000
Suhu                 0.0143         0.5340
KecepatanAngin       0.0108         0.4042
Kelembaban           0.0063         0.2339
ArahAngin            0.0046         0.1735
CurahHujan           0.0046         0.1705
> ##############################################
> set.seed(1234)
> train <- sample(1:nrow(new.DataDelay), round(nrow(new.DataDelay) * 0.80), 
+                 replace = TRUE)
> 
> traindata <- new.DataDelay[train,]
> testdata <- new.DataDelay[-train,]
> hasil1 <- rfsrc(Surv(Waktu, Status) ~ ., data = traindata,
+                ntree = 500, block.size = 1, splitrule = "logrank",importance = TRUE)
> print(hasil1)
                         Sample size: 950
                    Number of deaths: 372
                     Number of trees: 500
           Forest terminal node size: 15
       Average no. of terminal nodes: 41.164
No. of variables tried at each split: 3
              Total no. of variables: 6
       Resampling used to grow trees: swor
    Resample size used to grow trees: 600
                            Analysis: RSF
                              Family: surv
                      Splitting rule: logrank *random*
       Number of random split points: 10
                          (OOB) CRPS: 0.03379455
   (OOB) Requested performance error: 0.35906298

> plot(hasil1)

                 Importance   Relative Imp
Airlines             0.0839         1.0000
KecepatanAngin       0.0606         0.7223
ArahAngin            0.0601         0.7156
Suhu                 0.0572         0.6814
CurahHujan           0.0491         0.5846
Kelembaban           0.0365         0.4351
> ##########RSF LOG-RANK SCORE##########
> hasil2 <- rfsrc(Surv(Waktu, Status) ~ ., data = traindata,
+                 ntree = 500, block.size = 1, splitrule = "logrankscore",importance = TRUE)
> print(hasil2)
                         Sample size: 950
                    Number of deaths: 372
                     Number of trees: 500
           Forest terminal node size: 15
       Average no. of terminal nodes: 43.186
No. of variables tried at each split: 3
              Total no. of variables: 6
       Resampling used to grow trees: swor
    Resample size used to grow trees: 600
                            Analysis: RSF
                              Family: surv
                      Splitting rule: logrankscore *random*
       Number of random split points: 10
                          (OOB) CRPS: 0.04024358
   (OOB) Requested performance error: 0.40514593

> ##########VIMP RSF LOG-RANK SCORE##########
> plot(hasil2)

                 Importance Relative Imp
ArahAngin          0.0328       1.0000
Airlines           0.0319       0.9729
KecepatanAngin     0.0316       0.9649
Kelembaban         0.0266       0.8122
Suhu               0.0263       0.8018
CurahHujan         0.0250       0.7636
> ##########PLOT POHON RSF & SURVIVAL##########
> plot(get.tree(hasil1, 2))
> plot(get.tree(hasil2, 2))
> fit1<-survfit(formula=Surv(Waktu,Status)~Airlines,data=DataDelay)
> ggsurvplot(fit1,xlim=c(0,200), pval=TRUE, pval.method=TRUE, title='Kurva Survival Delay Keberangkatan berdasarkan Airlines')
> fit1<-survfit(formula=Surv(Waktu,Status)~ArahAngin,data=DataDelay)
> ggsurvplot(fit1,xlim=c(0,200), pval=TRUE, pval.method=TRUE, title='Kurva Survival Delay Keberangkatan berdasarkan Arah Angin')



Lampiran 3. Syntax R Pembuatan Web App Sederhana
# Import libraries
library(shiny)
library(shinythemes)
library(data.table)
library(RCurl)
library(randomForest)

# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/kautsarinaj/Data/main/delaydataCGK-DPS")
                    ,stringsAsFactors = T)

# Build model
model <- randomForest(delaystatus ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)

# Save model to RDS file
# saveRDS(model, "model.rds")

# Read in the RF model
#model <- readRDS("model.rds")

####################################
# User interface (UI)              #
####################################

ui <- fluidPage(theme = shinytheme("united"),
                
                # Page header
                headerPanel('Status Keberangkatan Penerbangan Rute CGK-DPS'),
                
                # Input values
                sidebarPanel(
                  HTML("<h3>Input parameters</h3>"),
                  
                  selectInput("airlines", label = "Airlines:", 
                              choices = list("Lion Air" = "lionair", "Batik Air" = "batikair", 
                                             "AirAsia" = "airasia", "GarudaIndonesia" = "garudaindonesia",
                                             "Citilink" = "citilink"), 
                              selected = "Lion Air"),
                  sliderInput("suhu", "Suhu (Temperature):",
                              min = 20, max = 40,
                              value = 30),
                  sliderInput("kelembaban", "Kelembaban (Humidity):",
                              min = 0, max = 30,
                              value = 20),
                  sliderInput("curahhujan", "Curah Hujan (Precipitation):",
                              min = 0, max = 5,
                              value = 3),
                  sliderInput("kecepatanangin", "Kecepatan Angin (Wind Speed):",
                              min = 0, max = 10,
                              value = 5),
                  selectInput("arahangin", label = "Arah Angin:", 
                              choices = list("N" = "n", "NNE" = "nne", 
                                             "NE" = "ne", "ENE" = "ene",
                                             "E" = "e", "ESE" = "ese",
                                             "SE" = "se", "SSE" = "sse",
                                             "S" = "s", "SSW" = "ssw",
                                             "SW" = "sw", "WSW" = "wsw",
                                             "W" = "w", "WNW" = "wnw",
                                             "NW" = "nw", "NNW" = "nnw"), 
                              selected = "N"),
                  
                  actionButton("submitbutton", "Submit", class = "btn btn-primary")
                ),
                
                mainPanel(
                  tags$label(h3('Status/Output')), # Status/Output Text Box
                  verbatimTextOutput('contents'),
                  tableOutput('tabledata') # Prediction results table
                  
                )
)

####################################
# Server                           #
####################################

server <- function(input, output, session) {
  
  # Input Data
  datasetInput <- reactive({  
    
    # outlook,temperature,humidity,windy,play
    df <- data.frame(
      Name = c("airlines",
               "suhu",
               "kelembaban",
               "curahhujan",
               "kecepatanangin",
               "arahangin"),
      Value = as.character(c(input$airlines,
                             input$suhu,
                             input$kelembaban,
                             input$curahhujan,
                             input$kecepatanangin,
                             input$arahangin)),
      stringsAsFactors = FALSE)
    
    delaystatus <- "delaystatus"
    df <- rbind(df, delaystatus)
    input <- transpose(df)
    write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
    
    test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
    
    test$airlines <- factor(test$airlines, levels = c("lionair", "airasia", "batikair", "garudaindonesia","citilink"))
    test$arahangin <- factor(test$arahangin, levels = c("n", "nne", "ne", "ene", 
                                                        "e", "ese", "se", "sse",
                                                        "s", "ssw", "sw", "wsw",
                                                        "w", "wnw", "nw", "nnw"))
    
    Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
    print(Output)
    
  })
  
  # Status/Output Text Box
  output$contents <- renderPrint({
    if (input$submitbutton>0) { 
      isolate("Proses selesai.") 
    } else {
      return("Server siap untuk digunakan.")
    }
  })
  
  # Prediction results table
  output$tabledata <- renderTable({
    if (input$submitbutton>0) { 
      isolate(datasetInput()) 
    } 
  })
  
}

####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
